"""create separate table for source id of merged station

Revision ID: f3cec738ecd8
Revises: d8b594a458e4
Create Date: 2023-04-28 21:57:36.583128

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'f3cec738ecd8'
down_revision = 'd8b594a458e4'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_stations_source_id', table_name='stations')
    op.drop_index('stations_point_geom_idx', table_name='stations')
    op.drop_table('stations')
    op.drop_table('address')
    op.drop_table('merged_station_source')
    op.drop_table('charging')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('charging',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('station_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('date_created', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('date_updated', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('capacity', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('kw_list', postgresql.ARRAY(postgresql.DOUBLE_PRECISION(precision=53)), autoincrement=False, nullable=True),
    sa.Column('ampere_list', postgresql.ARRAY(postgresql.DOUBLE_PRECISION(precision=53)), autoincrement=False, nullable=True),
    sa.Column('volt_list', postgresql.ARRAY(postgresql.DOUBLE_PRECISION(precision=53)), autoincrement=False, nullable=True),
    sa.Column('socket_type_list', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True),
    sa.Column('dc_support', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('total_kw', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('max_kw', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['station_id'], ['stations.id'], name='charging_station_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='charging_pkey'),
    sa.UniqueConstraint('station_id', name='charging_station_id_key')
    )
    op.create_table('merged_station_source',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('merged_station_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('duplicate_source_id', sa.VARCHAR(), autoincrement=False, nullable=False)
    )
    op.create_table('address',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('station_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('date_created', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('date_updated', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('street', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('town', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('district_old', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('district', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('state', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('country', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('gmaps_latitude', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('gmaps_longitude', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['station_id'], ['stations.id'], name='address_station_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='address_pkey'),
    sa.UniqueConstraint('station_id', name='address_station_id_key')
    )
    op.create_table('stations',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('operator', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('authentication', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('data_source', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('date_created', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('date_updated', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('payment', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('raw_data', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('source_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('country_code', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('is_merged', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('point', geoalchemy2.types.Geography(geometry_type='POINT', srid=4326, from_text='ST_GeogFromText', name='geography'), autoincrement=False, nullable=True),
    sa.Column('merge_status', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='stations_pkey')
    )
    op.create_index('stations_point_geom_idx', 'stations', ['point'], unique=False)
    op.create_index('ix_stations_source_id', 'stations', ['source_id'], unique=True)
    # ### end Alembic commands ###
